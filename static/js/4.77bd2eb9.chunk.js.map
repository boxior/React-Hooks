{"version":3,"sources":["components/CityCard/index.js","components/HOC/withWidth/index.js","components/Header/Cities/index.js","containers/Daily/index.js"],"names":["DailyWrap","styled","Paper","_templateObject","CityCardView","props","city","type","cityMain","_","get","react_default","a","createElement","List_default","ListItem_default","ListItemText_default","primary","forecastMap","daily","moment","format","weekly","cityDate","getDate","humidity","pressure","temp","temp_max","temp_min","Divider_default","defaultProps","withWidthView","ReceiveComponent","_Component","WithWidth","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","windowWidth","setWindowWidth","setState","window","innerWidth","inherits","createClass","key","value","addEventListener","removeEventListener","assign","Component","CitiesWrap","div","Cities_templateObject","CitiesView","cities","onFind","setCities","data","activeCity","_useState","useState","activeCityIndex","_useState2","slicedToArray","tabIndex","setTabIndex","index","findIndex","c","id","useEffect","AppBar_default","position","Tabs_default","onChange","e","objectSpread","name","variant","scrollButtons","map","cityIndex","Tab_default","label","CityCard","cIndex","getTabView","__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Header_Cities__WEBPACK_IMPORTED_MODULE_1__","_utils_variables__WEBPACK_IMPORTED_MODULE_2__","DailyView"],"mappings":"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","file":"static/js/4.77bd2eb9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport List from \"@material-ui/core/List/List\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport moment from \"moment\";\r\nimport Divider from \"@material-ui/core/Divider/Divider\";\r\nimport _ from \"lodash\";\r\nimport Paper from \"@material-ui/core/Paper/Paper\";\r\nimport {forecastMap} from \"../../utils/variables\";\r\n\r\nconst DailyWrap = styled(Paper)`;\r\n    margin: 15px;\r\n`;\r\n\r\nCityCardView.propTypes = {\r\n    city: PropTypes.object,\r\n    type: PropTypes.string\r\n};\r\n\r\nCityCardView.defaultProps = {};\r\n\r\nfunction CityCardView(props) {\r\n    const {city, type} = props;\r\n\r\n    const cityMain = _.get(city, \"main\", {});\r\n    \r\n    const getDate = () => {\r\n        switch (type) {\r\n            case forecastMap.daily:\r\n                return moment().format('MMMM Do YYYY, h:mm:ss a');\r\n                \r\n            case forecastMap.weekly:\r\n                const cityDate = _.get(city, \"dt_txt\");\r\n                return moment(cityDate).format('MMMM Do YYYY, h:mm:ss a');\r\n            default:\r\n                return moment().format('MMMM Do YYYY, h:mm:ss a');\r\n        }\r\n    };\r\n    \r\n    \r\n    return city && (\r\n        <DailyWrap>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        primary={`Date:`}\r\n                    />\r\n                    <ListItemText\r\n                        primary={getDate()}\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        primary={`Humidity:`}\r\n                    />\r\n                    <ListItemText\r\n                        primary={cityMain.humidity}\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        primary={`Pressure:`}\r\n                    />\r\n                    <ListItemText\r\n                        primary={cityMain.pressure}\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        primary={`Temp:`}\r\n                    />\r\n                    <ListItemText\r\n                        primary={cityMain.temp}\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        primary={`Temp max:`}\r\n                    />\r\n                    <ListItemText\r\n                        primary={cityMain.temp_max}\r\n                    />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        primary={`Temp min:`}\r\n                    />\r\n                    <ListItemText\r\n                        primary={cityMain.temp_min}\r\n                    />\r\n                </ListItem>\r\n            </List>\r\n            <Divider/>\r\n        </DailyWrap>\r\n    );\r\n}\r\n\r\nexport default CityCardView;","import React, {Component} from \"react\";\r\n\r\nwithWidthView.propTypes = {};\r\n\r\nwithWidthView.defaultProps = {};\r\n\r\nfunction withWidthView(ReceiveComponent) {\r\n\r\n    return class WithWidth extends Component {\r\n\r\n        state = {\r\n            windowWidth: 0\r\n        };\r\n\r\n        componentDidMount() {\r\n            window.addEventListener(`resize`, this.setWindowWidth);\r\n        };\r\n\r\n        setWindowWidth = () => {\r\n            this.setState({\r\n                windowWidth: window.innerWidth\r\n            });\r\n        };\r\n\r\n        componentWillUnmount() {\r\n            window.removeEventListener(`resize`, this.setWindowWidth);\r\n        };\r\n\r\n        render() {\r\n            return (\r\n                <ReceiveComponent\r\n                    {...this.props}\r\n                    windowWidth={this.state.windowWidth}\r\n                />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default withWidthView;","import React, {useState, useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport {forecastMap} from \"../../../utils/variables\";\r\nimport _ from \"lodash\";\r\nimport CityCardView from \"../../CityCard\";\r\nimport withWidthView from \"../../HOC/withWidth\";\r\n\r\nconst CitiesWrap = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nCitiesView.propTypes = {\r\n    cities: PropTypes.object,\r\n    location: PropTypes.object,\r\n    onFind: PropTypes.func,\r\n    setCities: PropTypes.func,\r\n    type: PropTypes.string,\r\n};\r\n\r\nCitiesView.defaultProps = {};\r\n\r\nfunction CitiesView(props) {\r\n    const {\r\n        cities,\r\n        onFind,\r\n        setCities,\r\n        type\r\n    } = props;\r\n    \r\n    const {\r\n        data,\r\n        activeCity\r\n    } = cities;\r\n\r\n    const [tabIndex, setTabIndex] = useState(activeCityIndex());\r\n\r\n    useEffect(() => {\r\n        setTabIndex(activeCityIndex());\r\n    }, [activeCity.id]);\r\n\r\n    function activeCityIndex() {\r\n        const index = data.findIndex(c => {\r\n            return c.id === activeCity.id;\r\n        });\r\n        return index !== -1 ? index : 0;\r\n    }\r\n\r\n    function handleChange(e, index) {\r\n        const city = data[index];\r\n\r\n        setTabIndex(index);\r\n\r\n        if (city) {\r\n            setCities({\r\n                ...cities,\r\n                activeCity: city\r\n            });\r\n\r\n            onFind({city: city.name});\r\n        }\r\n    }\r\n\r\n    const getTabView = (cityIndex) => {\r\n        switch (type) {\r\n            case forecastMap.daily:\r\n                const activeCity = _.get(cities, \"activeCity\", null);\r\n\r\n                return activeCity && (\r\n                    <CityCardView\r\n                        key={cityIndex}\r\n                        city={activeCity}\r\n                        type={forecastMap.daily}\r\n                    />\r\n                );\r\n\r\n            case forecastMap.weekly:\r\n                const list = _.get(cities, \"activeCity.list\", []);\r\n\r\n                return list.map((c, cIndex) => {\r\n                    return (\r\n                        <CityCardView\r\n                            key={cIndex}\r\n                            city={c}\r\n                            type={forecastMap.weekly}\r\n                        />\r\n                    )\r\n                });\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return !!data.length && (\r\n        <CitiesWrap>\r\n            <AppBar position=\"static\">\r\n                <Tabs\r\n                    value={tabIndex}\r\n                    onChange={handleChange}\r\n                    variant=\"scrollable\"\r\n                    scrollButtons=\"auto\"\r\n                >\r\n                    {data.map((city, cityIndex) => {\r\n                        return (\r\n                            <Tab\r\n                                key={cityIndex}\r\n                                label={city.name}\r\n                            />\r\n                        )\r\n                    })}\r\n                </Tabs>\r\n            </AppBar>\r\n            {data.map((city, cityIndex) => {\r\n                return cityIndex === tabIndex\r\n                    && getTabView(cityIndex)\r\n            })}\r\n        </CitiesWrap>\r\n    );\r\n}\r\n\r\nexport default withWidthView(CitiesView);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CitiesView from \"../../components/Header/Cities\";\r\nimport {forecastMap} from \"../../utils/variables\";\r\n\r\n\r\nDailyView.propTypes = {\r\n    cities: PropTypes.object,\r\n    setCities: PropTypes.func,\r\n    onFind: PropTypes.func\r\n};\r\n\r\nDailyView.defaultProps = {};\r\n\r\nfunction DailyView(props) {\r\n    const {\r\n        cities,\r\n        setCities,\r\n        onFind\r\n    } = props;\r\n    \r\n    return (\r\n        <CitiesView\r\n            setCities={setCities}\r\n            cities={cities}\r\n            onFind={onFind}\r\n            type={forecastMap.daily}\r\n        />\r\n    );\r\n}\r\n\r\nexport default DailyView;"],"sourceRoot":""}